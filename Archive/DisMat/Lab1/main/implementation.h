#ifndef MAIN_IMPLEMENTATION_H
#define MAIN_IMPLEMENTATION_H

#include <stdio.h>
#include <stdbool.h>

//Задание 1
// Условие задания:
// А – массив натуральных чисел, в котором нет одинаковых элементов;
// B – массив натуральных чисел, в котором нет одинаковых элементов.
// Получить массив С, содержащий все элементы массивов А и В без повторений.
void unordered_unionUniqueArray(int const *a, int sizeA,
                                int const *b, int sizeB,
                                int *c, int *sizeC);

// Задание 2
// Условие задания:
// А – массив натуральных чисел, в котором нет одинаковых элементов;
// B – массив натуральных чисел, в котором нет одинаковых элементов.
// Получить массив С, содержащий все такие элементы, которые есть и
// в массиве А и в массиве В.
void unordered_intersectionArray(int const *a, int sizeA,
                                 int const *b, int sizeB,
                                 int *c, int *sizeC);

// Задание 3
// Условие задания:
// А – массив натуральных чисел, в котором нет одинаковых элементов;
// B – массив натуральных чисел, в котором нет одинаковых элементов.
// Получить массив С, содержащий все элементы массива А, которых нет в B.
void unordered_differenceArray(int const *a, int sizeA,
                               int const *b, int sizeB,
                               int *c, int *sizeC);

// Задание 4
// Условие задания:
// А – массив натуральных чисел, в котором нет одинаковых элементов;
// B – массив натуральных чисел, в котором нет одинаковых элементов.
// Получить массив С, содержащий все элементы массива А, которых нет
// в B и все элементы массива В, которых нет в А.
void unordered_symmetricDifferenceArray(int const *a, int sizeA,
                                        int const *b, int sizeB,
                                        int *c, int *sizeC);

// Задание 5
// Условие задания:
// А – массив натуральных чисел, в котором нет одинаковых элементов;
// B – массив натуральных чисел, в котором нет одинаковых элементов.
// Определить, верно ли, что массив B содержит каждый элемент массива А.
bool unordered_isEquivalent(int const *a, int sizeA,
                            int const *b, int sizeB);

// Задание 6
// Условие задания:
// А – массив натуральных чисел, в котором нет одинаковых элементов;
// B – массив натуральных чисел, в котором нет одинаковых элементов.
// Определить, верно ли, что массивы А и B состоят из одинаковых элементов.
bool unordered_isEqual(int const *a, int sizeA,
                       int const *b, int sizeB);

// Задание 7
// Условие задания:
// А – массив натуральных чисел, в котором нет одинаковых элементов;
// B – массив натуральных чисел, в котором нет одинаковых элементов.
// Определить, верно ли, что в массивах А и B нет общих элементов.
bool unordered_isNotIntersecting(int const *a, int sizeA,
                                 int const *b, int sizeB);

// Задание 8
// Условие задания:
// Даны массивы натуральных чисел А и В, упорядоченные по возрастанию.
// Получить упорядоченный по возрастанию массив С, содержащий все элементы
// массивов А и В.
void ordered_unionArrayUnique(int const *a, int sizeA,
                              int const *b, int sizeB,
                              int *c, int *sizeC);

// Задание 9
// Условие задания:
// Даны массивы натуральных чисел А и В, упорядоченные по возрастанию.
// Получить упорядоченный по возрастанию массив С, содержащий все
// такие элементы, которые есть и в массиве А и в массиве В.
void ordered_unionArrayRepeat(int const *a, int sizeA,
                              int const *b, int sizeB,
                              int *c, int *sizeC);

// Задание 10
// Условие задания:
// Даны массивы натуральных чисел А и В, упорядоченные по возрастанию.
// Получить упорядоченный по возрастанию массив С, содержащий все элементы
// массива А, которых нет в B.
void ordered_differenceArraySorted(int const *a, int sizeA,
                                   int const *b, int sizeB,
                                   int *c, int *sizeC);

// Задание 11
// Условие задания:
// Даны массивы натуральных чисел А и В, упорядоченные по возрастанию.
// Получить упорядоченный по возрастанию массив С, содержащий все элементы
// массива А, которых нет в B и все элементы массива В, которых нет в А.
void ordered_symmetricDifferenceArraySorted(int const *a, int sizeA,
                                            int const *b, int sizeB,
                                            int *c, int *sizeC);

// Задание 12
// Условие задания:
// Даны массивы натуральных чисел А и В, упорядоченные по возрастанию.
// Определить, верно ли, что массив B содержит каждый элемент массива А.
bool ordered_isEqualOrder(int const *a, int sizeA,
                          int const *b, int sizeB);

#endif //MAIN_IMPLEMENTATION_H
